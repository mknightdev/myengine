#version 410

struct Material
{
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct Light
{
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};	

varying vec2 v_TexCoord;								 
varying vec3 v_FragPos;								 
varying vec3 v_Normal;	

uniform sampler2D u_Texture;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
																 
void main()											 
{	
	vec3 norm = normalize(v_Normal);						 
	vec3 lightDir = normalize(light.position - v_FragPos);

	// Texture													
	vec4 tex = texture2D(u_Texture, v_TexCoord);
	
	// Ambient
	vec3 ambient = light.ambient * texture(material.diffuse, v_TexCoord).rgb;		 
	
	// Diffuse
	float diff = max(dot(norm, lightDir), 0.0);			 
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, v_TexCoord).rgb;			 							 
	
	// Specular
	vec3 viewDir = normalize(viewPos - v_FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * (spec * material.specular);
	
	// Output
	vec3 result = (ambient + diffuse + specular);
	gl_FragColor = vec4(result, 1.0); 	 
}