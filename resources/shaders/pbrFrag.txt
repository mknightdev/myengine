#version 410

// Material properties
uniform vec3 albedo;
uniform float metallic;
uniform float roughness;
uniform float ao;

in vec3 v_WorldPos;
in vec3 v_Normal;
in vec2 v_TexCoord;								 		 

uniform vec3 lightPositions[4];
uniform vec3 lightColours[4];
uniform vec3 camPos;

out vec4 FragColour;

const float PI = 3.14159265359;

float DistributionGGX(vec3 _N, vec3 _H, float _roughness)
{
	float a = _roughness * _roughness;
	float a2 = a * a;
	float NdotH = max(dot(_N, _H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float GeometrySchlickGGX(float _NdotV, float _roughness)
{
    float r = (_roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = _NdotV;
    float denom = _NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 _N, vec3 _V, vec3 _L, float _roughness)
{
    float NdotV = max(dot(_N, _V), 0.0);
    float NdotL = max(dot(_N, _L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, _roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, _roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float _cosTheta, vec3 _F0)
{
    return _F0 + (1.0 - _F0) * pow(clamp(1.0 - _cosTheta, 0.0, 1.0), 5.0);
}

void main()											 
{	
	//// Start

	vec3 N = normalize(v_Normal);
	vec3 V = normalize(camPos - v_WorldPos);

	// Calculate reflectance at normal incidence; if dia-electric (like plastic) use F0
	// of 0.04 and if it's a metal, use the albedo colour as F0 (mettalic workflow)
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);

	// Reflectance Equation
	vec3 Lo = vec3(0.0);
	for (int i = 0; i < 4; i++)
	{
		// Calculate per-light radiance
		vec3 L = normalize(lightPositions[i] - v_WorldPos);
		vec3 H = normalize(V + L);
		float distance = length(lightPositions[i] - v_WorldPos);
		float attenuation = 1.0 / (distance * distance);
		vec3 radiance = lightColours[i] * attenuation;

		// Cook-Torrance BRDF
		float NDF = DistributionGGX(N, H, roughness);
		float G = GeometrySmith(N, V, L, roughness);
		vec3 F = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);

		vec3 numerator = NDF * G * F;
		float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;	// prevents divide by zero
		vec3 specular = numerator / denominator;

		// ks is equal to Fresnel
		vec3 kS = F;
		// For energy conservation, the diffuse and specular light can't be above 1.0 (unless the surface emits light);
		// to preserve this relationship the diffuse component (kD) should equal 1.0 - kS.
		vec3 kD = vec3(1.0) - kS;
		// Multiply kD by the inverse metalness such that only non-metals have diffuse lighting,
		// or a linear blend if partly metal (pure metals have no diffuse light).
		kD *= 1.0 - metallic;

		// Scale light by NdotL
		float NdotL = max(dot(N, L), 0.0);
		// Add to outgoing radiance Lo
		Lo += (kD * albedo / PI + specular) * radiance * NdotL;	// Note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
	}

	vec3 ambient = vec3(0.03) * albedo * ao;
	vec3 colour = ambient + Lo;

	// HDR tonemapping
	colour = colour / (colour + vec3(1.0));

	// Gamma correct
	colour = pow(colour, vec3(1.0/2.2));

	FragColour = vec4(colour, 1.0);

	//// End
}