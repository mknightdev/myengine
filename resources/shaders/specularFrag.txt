#version 410						 
varying vec2 v_TexCoord;								 
varying vec3 v_FragPos;								 
varying vec3 v_Normal;	

uniform sampler2D u_Texture;	
uniform vec3 lightPos;
uniform vec3 lightColour;
uniform vec3 viewPos;
																 
void main()											 
{	
	vec3 norm = normalize(v_Normal);						 
	vec3 lightDir = normalize(lightPos - v_FragPos);

	// Texture													
	vec4 tex = texture2D(u_Texture, v_TexCoord);
	
	// Ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * lightColour;		 
	
	// Diffuse
	float diff = max(dot(norm, lightDir), 0.0);			 
	vec3 diffuse = lightColour * diff;					 							 
	
	// Specular
	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - v_FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColour;
	
	// Output
	vec3 result = (ambient + diffuse + specular);
	gl_FragColor = vec4(result, 1.0) * tex; 	 
}