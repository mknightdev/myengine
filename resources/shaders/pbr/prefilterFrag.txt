#version 410
out vec4 FragColour;
in vec3 v_WorldPos;

uniform samplerCube environmentMap;
uniform float roughness;

const float PI = 3.14159265359;

float DistributionGGX(vec3 _N, vec3 _H, float _roughness)
{
	float a = _roughness * _roughness;
	float a2 = a * a;
	float NdotH = max(dot(_N, _H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float RadicalInverse_VdC(uint _bits) 
{
     _bits = (_bits << 16u) | (_bits >> 16u);
     _bits = ((_bits & 0x55555555u) << 1u) | ((_bits & 0xAAAAAAAAu) >> 1u);
     _bits = ((_bits & 0x33333333u) << 2u) | ((_bits & 0xCCCCCCCCu) >> 2u);
     _bits = ((_bits & 0x0F0F0F0Fu) << 4u) | ((_bits & 0xF0F0F0F0u) >> 4u);
     _bits = ((_bits & 0x00FF00FFu) << 8u) | ((_bits & 0xFF00FF00u) >> 8u);
     return float(_bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint _i, uint _N)
{
	return vec2(float(_i)/float(_N), RadicalInverse_VdC(_i));
}

vec3 ImportanceSampleGGX(vec2 _Xi, vec3 _N, float _roughness)
{
	float a = _roughness * _roughness;

	float phi = 2.0 * PI * _Xi.x;
	float cosTheta = sqrt((1.0 - _Xi.y) / (1.0 + (a * a - 1.0) * _Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	vec3 up = abs(_N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, _N));
	vec3 bitangent = cross(_N, tangent);

	vec3 sampleVec = tangent * H.x + bitangent * H.y + _N * H.z;
	return normalize(sampleVec);
}

void main()
{
	vec3 N = normalize(v_WorldPos);

	vec3 R = N;
	vec3 V = R;

	const uint SAMPLE_COUNT = 1024u;
	vec3 prefilteredColor  = vec3(0.0);
	float totalWeight = 0.0;
	
	for (uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		vec2 Xi = Hammersley(i, SAMPLE_COUNT);
		vec3 H = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(dot(N, L), 0.0);
		if (NdotL > 0.0)
		{
			float D = DistributionGGX(N, H, roughness);
			float NdotH = max(dot(N, H), 0.0);
			float HdotV = max(dot(H, V), 0.0);
			float pdf = D * NdotH / (4.0 / HdotV) + 0.0001;

			float resolution = 512.0;
			float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
			float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

			float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

			prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
			totalWeight += NdotL;
		}
	}

	prefilteredColor = prefilteredColor / totalWeight;
	FragColour = vec4(prefilteredColor, 1.0);
}