#version 410

// Material properties
uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;
uniform sampler2D emissiveMap;

in vec3 v_WorldPos;
in vec2 v_TexCoord;
in vec3 v_Normal;

// IBL
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

uniform vec3 lightPositions[4];
uniform vec3 lightColours[4];
uniform vec3 camPos;

out vec4 FragColour;

const float PI = 3.14159265359;

float DistributionGGX(vec3 _N, vec3 _H, float _roughness)
{
	float a = _roughness * _roughness;
	float a2 = a * a;
	float NdotH = max(dot(_N, _H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float BlinnPhong(vec3 _N, vec3 _H, float _roughness)
{
	float NdotH = max(dot(_N, _H), 0.0);
	float roughnessSqrd = _roughness * _roughness;
	
	float partOne = 1 / (PI * roughnessSqrd);
	float partTwo = pow(NdotH, (2 / roughnessSqrd) * -2);
	
	return partOne * partTwo;
	
}

float Kelemen(float _NdotV, float _roughness)
{
	float C = sqrt(2 / PI);
	float K = _roughness * _roughness * C;
	float gH = _NdotV * K + (1 - K);

	return (gH * gH * _NdotV);
}

float GeometrySmith(vec3 _N, vec3 _V, vec3 _L, float _roughness)
{
    float NdotV = max(dot(_N, _V), 0.0);
    float NdotL = max(dot(_N, _L), 0.0);
    float ggx2 = Kelemen(NdotV, _roughness);
    float ggx1 = Kelemen(NdotL, _roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float _cosTheta, vec3 _F0)
{
    return _F0 + (1.0 - _F0) * pow(clamp(1.0 - _cosTheta, 0.0, 1.0), 5.0);
}

vec3 getNormalFromMap()
{
	vec3 tangentNormal = texture(normalMap, v_TexCoord).xyz * 2.0 - 1.0;

	vec3 Q1 = dFdx(v_WorldPos);
	vec3 Q2 = dFdy(v_WorldPos);
	vec2 st1 = dFdx(v_TexCoord);
	vec2 st2 = dFdy(v_TexCoord);

	vec3 N = normalize(v_Normal);
	vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);
	vec3 B = -normalize(cross(N, T));
	mat3 TBN = mat3(T, B, N);

	return normalize(TBN * tangentNormal);
}

vec3 fresnelSchlickRoughness(float _cosTheta, vec3 _F0, float _roughness)
{
    return _F0 + (max(vec3(1.0 - _roughness), _F0) - _F0) * pow(clamp(1.0 - _cosTheta, 0.0, 1.0), 5.0);
} 

void main()											 
{	
	vec3 albedo = pow(texture(albedoMap, v_TexCoord).rgb, vec3(2.2));
	float metallic = texture(metallicMap, v_TexCoord).r;
	float roughness = texture(roughnessMap, v_TexCoord).r;
	float ao = texture(aoMap, v_TexCoord).r;
	vec3 emissive = pow(texture(emissiveMap, v_TexCoord).rgb, vec3(2.2));

	vec3 N = getNormalFromMap();
	//vec3 N = normalize(v_Normal);
	vec3 V = normalize(camPos - v_WorldPos);
	vec3 R = reflect(-V, N);

	// Calculate reflectance at normal incidence; if dia-electric (like plastic) use F0
	// of 0.04 and if it's a metal, use the albedo colour as F0 (mettalic workflow)
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, albedo, metallic);

	// Reflectance Equation
	vec3 Lo = vec3(0.0);
	for (int i = 0; i < 4; i++)
	{
		// Calculate per-light radiance
		vec3 L = normalize(lightPositions[i] - v_WorldPos);
		vec3 H = normalize(V + L);
		float distance = length(lightPositions[i] - v_WorldPos);
		float attenuation = 1.0 / (distance * distance);
		vec3 radiance = lightColours[i] * attenuation;

		// Cook-Torrance BRDF
		float NDF = BlinnPhong(N, H, roughness);
		float G = GeometrySmith(N, V, L, roughness);
		vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

		vec3 numerator = NDF * G * F;
		float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;	// prevents divide by zero
		vec3 specular = numerator / denominator;

		// ks is equal to Fresnel
		vec3 kS = F;
		// For energy conservation, the diffuse and specular light can't be above 1.0 (unless the surface emits light);
		// to preserve this relationship the diffuse component (kD) should equal 1.0 - kS.
		vec3 kD = vec3(1.0) - kS;
		// Multiply kD by the inverse metalness such that only non-metals have diffuse lighting,
		// or a linear blend if partly metal (pure metals have no diffuse light).
		kD *= 1.0 - metallic;

		// Scale light by NdotL
		float NdotL = max(dot(N, L), 0.0);

		// Add to outgoing radiance Lo
		Lo += (kD * albedo / PI + specular) * radiance * NdotL;	// Note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
	}

	vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

	vec3 kS = F;
	vec3 kD = 1.0 - kS;
	kD *= 1.0 - metallic;

	vec3 irradiance = texture(irradianceMap, N).rgb;
	vec3 diffuse = irradiance * albedo;

	const float MAX_REFLECTION_LOD = 4.0;
	vec3 prefilteredColour = textureLod(prefilterMap, R, roughness * MAX_REFLECTION_LOD).rgb;
	vec2 brdf = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
	vec3 specular = prefilteredColour * (F * brdf.x + brdf.y);

	vec3 ambient = (kD * diffuse + specular) * ao;
	
	vec3 colour = ambient + Lo;

	// HDR tonemapping
	colour = colour / (colour + vec3(1.0));

	// Gamma correct
	colour = pow(colour, vec3(1.0/2.2));

	FragColour = vec4(emissive + colour, 1.0);
	//FragColour = vec4(colour, 1.0);
}