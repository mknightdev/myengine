#version 410

out vec2 FragColour;
in vec2 v_TexCoord;

const float PI = 3.14159265359;

float RadicalInverse_VdC(uint _bits) 
{
     _bits = (_bits << 16u) | (_bits >> 16u);
     _bits = ((_bits & 0x55555555u) << 1u) | ((_bits & 0xAAAAAAAAu) >> 1u);
     _bits = ((_bits & 0x33333333u) << 2u) | ((_bits & 0xCCCCCCCCu) >> 2u);
     _bits = ((_bits & 0x0F0F0F0Fu) << 4u) | ((_bits & 0xF0F0F0F0u) >> 4u);
     _bits = ((_bits & 0x00FF00FFu) << 8u) | ((_bits & 0xFF00FF00u) >> 8u);
     return float(_bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint _i, uint _N)
{
	return vec2(float(_i)/float(_N), RadicalInverse_VdC(_i));
}

vec3 ImportanceSampleGGX(vec2 _Xi, vec3 _N, float _roughness)
{
	float a = _roughness * _roughness;

	float phi = 2.0 * PI * _Xi.x;
	float cosTheta = sqrt((1.0 - _Xi.y) / (1.0 + (a * a - 1.0) * _Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	vec3 up = abs(_N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, _N));
	vec3 bitangent = cross(_N, tangent);

	vec3 sampleVec = tangent * H.x * bitangent * H.y + _N * H.z;
	return normalize(sampleVec);
}

float Neumann(vec3 _N, vec3 _V, vec3 _L)
{
	float NdotV = max(dot(_N, _V), 0.0);
	float NdotL = max(dot(_N, _V), 0.0);

	float nom = NdotV * NdotL;
	float denom = max(NdotL, NdotV);

	return nom / denom;
}

vec2 IntegrateBRDF(float _NdotV, float _roughness)
{
    vec3 V;
    V.x = sqrt(1.0 - _NdotV * _NdotV);
    V.y = 0.0;
    V.z = _NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024u;
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
		vec2 Xi = Hammersley(i, SAMPLE_COUNT);
		vec3 H = ImportanceSampleGGX(Xi, N, _roughness);
		vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0)
        {
            float G = Neumann(N, V, L);
            float G_Vis = (G * VdotH) / (NdotH * _NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);

    return vec2(A, B);
}

void main()
{
    vec2 integratedBRDF = IntegrateBRDF(v_TexCoord.x, v_TexCoord.y);
    FragColour = integratedBRDF;
}