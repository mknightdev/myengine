#version 410

struct Material
{
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 4

in vec3 v_FragPos;
in vec3 v_Normal;
in vec2 v_TexCoord;								 		 

uniform vec3 viewPos;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform Material material;
uniform sampler2D diffuse;

out vec4 FragColour;
										
void main()											 
{	
	// Properties
	vec3 norm = normalize(v_Normal);						 
	vec3 viewDir = normalize(viewPos - v_FragPos);

	//FragColour = vec4(result, 1.0);
	FragColour = texture2D(material.diffuse, v_TexCoord);
	//FragColour = texture2D(diffuse, v_TexCoord);
}