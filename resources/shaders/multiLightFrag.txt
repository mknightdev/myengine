#version 330 core

struct Material
{
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct PointLight 
{
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define NR_POINT_LIGHTS 4

in vec3 v_FragPos;								 
in vec3 v_Normal;	
in vec2 v_TexCoord;		

uniform sampler2D u_Texture;
uniform vec3 viewPos;
uniform Material material;
uniform PointLight pointLights[NR_POINT_LIGHTS];

out vec4 FragColour;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
																 
void main()											 
{	
	vec3 norm = normalize(v_Normal);
	vec3 viewDir = normalize(viewPos - v_FragPos);

	vec3 result = vec3(0.0);

	// Point light
	for (int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += CalcPointLight(pointLights[i], norm, v_FragPos, viewDir);
	}
	
	FragColour = vec4(result, 1.0); 
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);

	// Diffuse
	float diff = max(dot(normal, lightDir), 0.0);

	// Specular
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	// Attenuation
	float distance = length(light.position - v_FragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	// Combine results
	vec3 ambient = light.ambient * texture(material.diffuse, v_TexCoord).rgb;
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, v_TexCoord).rgb;
	vec3 specular = light.specular * (spec * material.specular);

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
}